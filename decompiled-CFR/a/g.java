/*
 * Decompiled with CFR <Could not determine version>.
 */
package a;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public final class g {
    public static final g A;
    public static final g B;
    public static final g C;
    public static final g D;
    public static final g E;
    public static final g F;
    public static final g G;
    public static final g H;
    public static final g I;
    public static final g J;
    public static final g K;
    public static final g L;
    public static final g M;
    public static final g N;
    public static final g O;
    public static final g P;
    public static final g Q;
    public static final g R;
    public static final g S;
    public static final g T;
    public static final g U;
    public static final g V;
    public static final g W;
    public static final g X;
    public static final g Y;
    public static final g Z;
    public static final g a;
    public static final g aA;
    public static final g aB;
    public static final g aC;
    public static final g aD;
    public static final g aE;
    public static final g aF;
    public static final g aG;
    public static final g aH;
    public static final g aI;
    public static final g aJ;
    public static final g aK;
    public static final g aL;
    public static final g aM;
    public static final g aN;
    public static final g aO;
    public static final g aP;
    public static final g aQ;
    public static final g aR;
    public static final g aS;
    public static final g aT;
    public static final g aU;
    public static final g aV;
    public static final g aW;
    public static final g aX;
    public static final g aY;
    public static final g aZ;
    public static final g aa;
    public static final g ab;
    public static final g ac;
    public static final g ad;
    public static final g ae;
    public static final g af;
    public static final g ag;
    public static final g ah;
    public static final g ai;
    public static final g aj;
    public static final g ak;
    public static final g al;
    public static final g am;
    public static final g an;
    public static final g ao;
    public static final g ap;
    public static final g aq;
    public static final g ar;
    public static final g as;
    public static final g at;
    public static final g au;
    public static final g av;
    public static final g aw;
    public static final g ax;
    public static final g ay;
    public static final g az;
    public static final g b;
    public static final g ba;
    public static final g bb;
    public static final g bc;
    public static final g bd;
    public static final g be;
    public static final g bf;
    public static final g bg;
    public static final g bh;
    private static final ConcurrentMap<String, g> bj;
    public static final g c;
    public static final g d;
    public static final g e;
    public static final g f;
    public static final g g;
    public static final g h;
    public static final g i;
    public static final g j;
    public static final g k;
    public static final g l;
    public static final g m;
    public static final g n;
    public static final g o;
    public static final g p;
    public static final g q;
    public static final g r;
    public static final g s;
    public static final g t;
    public static final g u;
    public static final g v;
    public static final g w;
    public static final g x;
    public static final g y;
    public static final g z;
    final String bi;

    static {
        bj = new ConcurrentHashMap<String, g>();
        a = g.a("SSL_RSA_WITH_NULL_MD5");
        b = g.a("SSL_RSA_WITH_NULL_SHA");
        c = g.a("SSL_RSA_EXPORT_WITH_RC4_40_MD5");
        d = g.a("SSL_RSA_WITH_RC4_128_MD5");
        e = g.a("SSL_RSA_WITH_RC4_128_SHA");
        f = g.a("SSL_RSA_EXPORT_WITH_DES40_CBC_SHA");
        g = g.a("SSL_RSA_WITH_DES_CBC_SHA");
        h = g.a("SSL_RSA_WITH_3DES_EDE_CBC_SHA");
        i = g.a("SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA");
        j = g.a("SSL_DHE_DSS_WITH_DES_CBC_SHA");
        k = g.a("SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA");
        l = g.a("SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA");
        m = g.a("SSL_DHE_RSA_WITH_DES_CBC_SHA");
        n = g.a("SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA");
        o = g.a("SSL_DH_anon_EXPORT_WITH_RC4_40_MD5");
        p = g.a("SSL_DH_anon_WITH_RC4_128_MD5");
        q = g.a("SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA");
        r = g.a("SSL_DH_anon_WITH_DES_CBC_SHA");
        s = g.a("SSL_DH_anon_WITH_3DES_EDE_CBC_SHA");
        t = g.a("TLS_KRB5_WITH_DES_CBC_SHA");
        u = g.a("TLS_KRB5_WITH_3DES_EDE_CBC_SHA");
        v = g.a("TLS_KRB5_WITH_RC4_128_SHA");
        w = g.a("TLS_KRB5_WITH_DES_CBC_MD5");
        x = g.a("TLS_KRB5_WITH_3DES_EDE_CBC_MD5");
        y = g.a("TLS_KRB5_WITH_RC4_128_MD5");
        z = g.a("TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA");
        A = g.a("TLS_KRB5_EXPORT_WITH_RC4_40_SHA");
        B = g.a("TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5");
        C = g.a("TLS_KRB5_EXPORT_WITH_RC4_40_MD5");
        D = g.a("TLS_RSA_WITH_AES_128_CBC_SHA");
        E = g.a("TLS_DHE_DSS_WITH_AES_128_CBC_SHA");
        F = g.a("TLS_DHE_RSA_WITH_AES_128_CBC_SHA");
        G = g.a("TLS_DH_anon_WITH_AES_128_CBC_SHA");
        H = g.a("TLS_RSA_WITH_AES_256_CBC_SHA");
        I = g.a("TLS_DHE_DSS_WITH_AES_256_CBC_SHA");
        J = g.a("TLS_DHE_RSA_WITH_AES_256_CBC_SHA");
        K = g.a("TLS_DH_anon_WITH_AES_256_CBC_SHA");
        L = g.a("TLS_RSA_WITH_NULL_SHA256");
        M = g.a("TLS_RSA_WITH_AES_128_CBC_SHA256");
        N = g.a("TLS_RSA_WITH_AES_256_CBC_SHA256");
        O = g.a("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256");
        P = g.a("TLS_RSA_WITH_CAMELLIA_128_CBC_SHA");
        Q = g.a("TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA");
        R = g.a("TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA");
        S = g.a("TLS_DHE_RSA_WITH_AES_128_CBC_SHA256");
        T = g.a("TLS_DHE_DSS_WITH_AES_256_CBC_SHA256");
        U = g.a("TLS_DHE_RSA_WITH_AES_256_CBC_SHA256");
        V = g.a("TLS_DH_anon_WITH_AES_128_CBC_SHA256");
        W = g.a("TLS_DH_anon_WITH_AES_256_CBC_SHA256");
        X = g.a("TLS_RSA_WITH_CAMELLIA_256_CBC_SHA");
        Y = g.a("TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA");
        Z = g.a("TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA");
        aa = g.a("TLS_PSK_WITH_RC4_128_SHA");
        ab = g.a("TLS_PSK_WITH_3DES_EDE_CBC_SHA");
        ac = g.a("TLS_PSK_WITH_AES_128_CBC_SHA");
        ad = g.a("TLS_PSK_WITH_AES_256_CBC_SHA");
        ae = g.a("TLS_RSA_WITH_SEED_CBC_SHA");
        af = g.a("TLS_RSA_WITH_AES_128_GCM_SHA256");
        ag = g.a("TLS_RSA_WITH_AES_256_GCM_SHA384");
        ah = g.a("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256");
        ai = g.a("TLS_DHE_RSA_WITH_AES_256_GCM_SHA384");
        aj = g.a("TLS_DHE_DSS_WITH_AES_128_GCM_SHA256");
        ak = g.a("TLS_DHE_DSS_WITH_AES_256_GCM_SHA384");
        al = g.a("TLS_DH_anon_WITH_AES_128_GCM_SHA256");
        am = g.a("TLS_DH_anon_WITH_AES_256_GCM_SHA384");
        an = g.a("TLS_EMPTY_RENEGOTIATION_INFO_SCSV");
        ao = g.a("TLS_FALLBACK_SCSV");
        ap = g.a("TLS_ECDH_ECDSA_WITH_NULL_SHA");
        aq = g.a("TLS_ECDH_ECDSA_WITH_RC4_128_SHA");
        ar = g.a("TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA");
        as = g.a("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA");
        at = g.a("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA");
        au = g.a("TLS_ECDHE_ECDSA_WITH_NULL_SHA");
        av = g.a("TLS_ECDHE_ECDSA_WITH_RC4_128_SHA");
        aw = g.a("TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA");
        ax = g.a("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA");
        ay = g.a("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA");
        az = g.a("TLS_ECDH_RSA_WITH_NULL_SHA");
        aA = g.a("TLS_ECDH_RSA_WITH_RC4_128_SHA");
        aB = g.a("TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA");
        aC = g.a("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA");
        aD = g.a("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA");
        aE = g.a("TLS_ECDHE_RSA_WITH_NULL_SHA");
        aF = g.a("TLS_ECDHE_RSA_WITH_RC4_128_SHA");
        aG = g.a("TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA");
        aH = g.a("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA");
        aI = g.a("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA");
        aJ = g.a("TLS_ECDH_anon_WITH_NULL_SHA");
        aK = g.a("TLS_ECDH_anon_WITH_RC4_128_SHA");
        aL = g.a("TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA");
        aM = g.a("TLS_ECDH_anon_WITH_AES_128_CBC_SHA");
        aN = g.a("TLS_ECDH_anon_WITH_AES_256_CBC_SHA");
        aO = g.a("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256");
        aP = g.a("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384");
        aQ = g.a("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256");
        aR = g.a("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384");
        aS = g.a("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256");
        aT = g.a("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384");
        aU = g.a("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256");
        aV = g.a("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384");
        aW = g.a("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256");
        aX = g.a("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384");
        aY = g.a("TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256");
        aZ = g.a("TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384");
        ba = g.a("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
        bb = g.a("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
        bc = g.a("TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256");
        bd = g.a("TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384");
        be = g.a("TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA");
        bf = g.a("TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA");
        bg = g.a("TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256");
        bh = g.a("TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256");
    }

    private g(String string) {
        if (string == null) throw new NullPointerException();
        this.bi = string;
    }

    public static g a(String string) {
        g g2;
        g g3 = g2 = (g)bj.get(string);
        if (g2 != null) return g3;
        g2 = new g(string);
        g3 = bj.putIfAbsent(string, g2);
        if (g3 != null) return g3;
        return g2;
    }

    public final String toString() {
        return this.bi;
    }
}

