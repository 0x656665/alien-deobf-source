package a;

import java.util.concurrent.*;

public final class g
{
    public static final g A;
    public static final g B;
    public static final g C;
    public static final g D;
    public static final g E;
    public static final g F;
    public static final g G;
    public static final g H;
    public static final g I;
    public static final g J;
    public static final g K;
    public static final g L;
    public static final g M;
    public static final g N;
    public static final g O;
    public static final g P;
    public static final g Q;
    public static final g R;
    public static final g S;
    public static final g T;
    public static final g U;
    public static final g V;
    public static final g W;
    public static final g X;
    public static final g Y;
    public static final g Z;
    public static final g a;
    public static final g aA;
    public static final g aB;
    public static final g aC;
    public static final g aD;
    public static final g aE;
    public static final g aF;
    public static final g aG;
    public static final g aH;
    public static final g aI;
    public static final g aJ;
    public static final g aK;
    public static final g aL;
    public static final g aM;
    public static final g aN;
    public static final g aO;
    public static final g aP;
    public static final g aQ;
    public static final g aR;
    public static final g aS;
    public static final g aT;
    public static final g aU;
    public static final g aV;
    public static final g aW;
    public static final g aX;
    public static final g aY;
    public static final g aZ;
    public static final g aa;
    public static final g ab;
    public static final g ac;
    public static final g ad;
    public static final g ae;
    public static final g af;
    public static final g ag;
    public static final g ah;
    public static final g ai;
    public static final g aj;
    public static final g ak;
    public static final g al;
    public static final g am;
    public static final g an;
    public static final g ao;
    public static final g ap;
    public static final g aq;
    public static final g ar;
    public static final g as;
    public static final g at;
    public static final g au;
    public static final g av;
    public static final g aw;
    public static final g ax;
    public static final g ay;
    public static final g az;
    public static final g b;
    public static final g ba;
    public static final g bb;
    public static final g bc;
    public static final g bd;
    public static final g be;
    public static final g bf;
    public static final g bg;
    public static final g bh;
    private static final ConcurrentMap<String, g> bj;
    public static final g c;
    public static final g d;
    public static final g e;
    public static final g f;
    public static final g g;
    public static final g h;
    public static final g i;
    public static final g j;
    public static final g k;
    public static final g l;
    public static final g m;
    public static final g n;
    public static final g o;
    public static final g p;
    public static final g q;
    public static final g r;
    public static final g s;
    public static final g t;
    public static final g u;
    public static final g v;
    public static final g w;
    public static final g x;
    public static final g y;
    public static final g z;
    final String bi;
    
    static {
        bj = new ConcurrentHashMap<String, g>();
        a = a("SSL_RSA_WITH_NULL_MD5");
        b = a("SSL_RSA_WITH_NULL_SHA");
        c = a("SSL_RSA_EXPORT_WITH_RC4_40_MD5");
        d = a("SSL_RSA_WITH_RC4_128_MD5");
        e = a("SSL_RSA_WITH_RC4_128_SHA");
        f = a("SSL_RSA_EXPORT_WITH_DES40_CBC_SHA");
        g = a("SSL_RSA_WITH_DES_CBC_SHA");
        h = a("SSL_RSA_WITH_3DES_EDE_CBC_SHA");
        i = a("SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA");
        j = a("SSL_DHE_DSS_WITH_DES_CBC_SHA");
        k = a("SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA");
        l = a("SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA");
        m = a("SSL_DHE_RSA_WITH_DES_CBC_SHA");
        n = a("SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA");
        o = a("SSL_DH_anon_EXPORT_WITH_RC4_40_MD5");
        p = a("SSL_DH_anon_WITH_RC4_128_MD5");
        q = a("SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA");
        r = a("SSL_DH_anon_WITH_DES_CBC_SHA");
        s = a("SSL_DH_anon_WITH_3DES_EDE_CBC_SHA");
        t = a("TLS_KRB5_WITH_DES_CBC_SHA");
        u = a("TLS_KRB5_WITH_3DES_EDE_CBC_SHA");
        v = a("TLS_KRB5_WITH_RC4_128_SHA");
        w = a("TLS_KRB5_WITH_DES_CBC_MD5");
        x = a("TLS_KRB5_WITH_3DES_EDE_CBC_MD5");
        y = a("TLS_KRB5_WITH_RC4_128_MD5");
        z = a("TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA");
        A = a("TLS_KRB5_EXPORT_WITH_RC4_40_SHA");
        B = a("TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5");
        C = a("TLS_KRB5_EXPORT_WITH_RC4_40_MD5");
        D = a("TLS_RSA_WITH_AES_128_CBC_SHA");
        E = a("TLS_DHE_DSS_WITH_AES_128_CBC_SHA");
        F = a("TLS_DHE_RSA_WITH_AES_128_CBC_SHA");
        G = a("TLS_DH_anon_WITH_AES_128_CBC_SHA");
        H = a("TLS_RSA_WITH_AES_256_CBC_SHA");
        I = a("TLS_DHE_DSS_WITH_AES_256_CBC_SHA");
        J = a("TLS_DHE_RSA_WITH_AES_256_CBC_SHA");
        K = a("TLS_DH_anon_WITH_AES_256_CBC_SHA");
        L = a("TLS_RSA_WITH_NULL_SHA256");
        M = a("TLS_RSA_WITH_AES_128_CBC_SHA256");
        N = a("TLS_RSA_WITH_AES_256_CBC_SHA256");
        O = a("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256");
        P = a("TLS_RSA_WITH_CAMELLIA_128_CBC_SHA");
        Q = a("TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA");
        R = a("TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA");
        S = a("TLS_DHE_RSA_WITH_AES_128_CBC_SHA256");
        T = a("TLS_DHE_DSS_WITH_AES_256_CBC_SHA256");
        U = a("TLS_DHE_RSA_WITH_AES_256_CBC_SHA256");
        V = a("TLS_DH_anon_WITH_AES_128_CBC_SHA256");
        W = a("TLS_DH_anon_WITH_AES_256_CBC_SHA256");
        X = a("TLS_RSA_WITH_CAMELLIA_256_CBC_SHA");
        Y = a("TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA");
        Z = a("TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA");
        aa = a("TLS_PSK_WITH_RC4_128_SHA");
        ab = a("TLS_PSK_WITH_3DES_EDE_CBC_SHA");
        ac = a("TLS_PSK_WITH_AES_128_CBC_SHA");
        ad = a("TLS_PSK_WITH_AES_256_CBC_SHA");
        ae = a("TLS_RSA_WITH_SEED_CBC_SHA");
        af = a("TLS_RSA_WITH_AES_128_GCM_SHA256");
        ag = a("TLS_RSA_WITH_AES_256_GCM_SHA384");
        ah = a("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256");
        ai = a("TLS_DHE_RSA_WITH_AES_256_GCM_SHA384");
        aj = a("TLS_DHE_DSS_WITH_AES_128_GCM_SHA256");
        ak = a("TLS_DHE_DSS_WITH_AES_256_GCM_SHA384");
        al = a("TLS_DH_anon_WITH_AES_128_GCM_SHA256");
        am = a("TLS_DH_anon_WITH_AES_256_GCM_SHA384");
        an = a("TLS_EMPTY_RENEGOTIATION_INFO_SCSV");
        ao = a("TLS_FALLBACK_SCSV");
        ap = a("TLS_ECDH_ECDSA_WITH_NULL_SHA");
        aq = a("TLS_ECDH_ECDSA_WITH_RC4_128_SHA");
        ar = a("TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA");
        as = a("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA");
        at = a("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA");
        au = a("TLS_ECDHE_ECDSA_WITH_NULL_SHA");
        av = a("TLS_ECDHE_ECDSA_WITH_RC4_128_SHA");
        aw = a("TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA");
        ax = a("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA");
        ay = a("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA");
        az = a("TLS_ECDH_RSA_WITH_NULL_SHA");
        aA = a("TLS_ECDH_RSA_WITH_RC4_128_SHA");
        aB = a("TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA");
        aC = a("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA");
        aD = a("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA");
        aE = a("TLS_ECDHE_RSA_WITH_NULL_SHA");
        aF = a("TLS_ECDHE_RSA_WITH_RC4_128_SHA");
        aG = a("TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA");
        aH = a("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA");
        aI = a("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA");
        aJ = a("TLS_ECDH_anon_WITH_NULL_SHA");
        aK = a("TLS_ECDH_anon_WITH_RC4_128_SHA");
        aL = a("TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA");
        aM = a("TLS_ECDH_anon_WITH_AES_128_CBC_SHA");
        aN = a("TLS_ECDH_anon_WITH_AES_256_CBC_SHA");
        aO = a("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256");
        aP = a("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384");
        aQ = a("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256");
        aR = a("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384");
        aS = a("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256");
        aT = a("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384");
        aU = a("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256");
        aV = a("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384");
        aW = a("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256");
        aX = a("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384");
        aY = a("TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256");
        aZ = a("TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384");
        ba = a("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
        bb = a("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
        bc = a("TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256");
        bd = a("TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384");
        be = a("TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA");
        bf = a("TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA");
        bg = a("TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256");
        bh = a("TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256");
    }
    
    private g(final String bi) {
        super();
        if (bi != null) {
            this.bi = bi;
            return;
        }
        throw new NullPointerException();
    }
    
    public static g a(final String s) {
        g g;
        if ((g = a.g.bj.get(s)) == null) {
            final g g2 = new g(s);
            g = a.g.bj.putIfAbsent(s, g2);
            if (g == null) {
                return g2;
            }
        }
        return g;
    }
    
    @Override
    public final String toString() {
        return this.bi;
    }
}
